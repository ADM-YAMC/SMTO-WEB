@inject IJSRuntime Js
<style>


.sidenav {
  height: 100%;
  width: 3.5rem;
  position: fixed;
  z-index: 1;
  top: 55px;
  left: 0;
  background: #1c57b9;
  overflow-x: hidden;
  transition: 0.5s;
  padding-top: 60px;
}

/*.sidenav a {
  padding: 6px 6px 6px 15px;
  text-decoration: none;
  font-size: 17px;
  color: #818181;
  display: block;
  transition: 0.3s;
  background:red;
  border-bottom:solid 1px black;
}*/
   /* .rz-panel-menu, .rz-navigation-item-wrapper, .rz-navigation-item {
        overflow-y: hidden !important;
    }*/
.sidenav a:hover {
  color: #f1f1f1;
}


.sidenav .closebtn {
  position: absolute;
  top: 0;
  right: 25px;
  font-size: 36px;
  margin-left: 50px;
}
.rz-panel-menu .rz-navigation-item-link{
    padding-left:1rem;

}
.rz-navigation-item-text {
overflow:hidden;

}
   /* div.rz-navigation-item-wrapper {
        background: #45536b !important;
    }*/
    .rz-navigation-item-wrapper-active:before {
        background-color: #006797 !important;
    }
#main {
  transition: margin-left .5s;
  padding: 16px;
}

@@media screen and (max-height: 450px) {
  .sidenav {padding-top: 15px;}
  .sidenav a {font-size: 18px;}
}
</style>


<div id="mySidenav" class="sidenav">
    @*<a  href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>*@
    @*<a href="#"><i style="display:inline" class="fas fa-home fa-1x"></i>  content</a>
        <a href="#">content</a>*@
    <a>
        <RadzenPanelMenu Style="width:100%; overflow-y:hidden !important;">
            @if (user != null)
            {
                if (user.rol == "1")
                {
                    <RadzenPanelMenuItem Text="Inicio" Path="administrador" Icon="home"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Usuarios" Path="usuarios" Icon="account_circle"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Empresas" Path="fileinput" Icon="attach_file"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Sucursales" Path="dialog" Icon="perm_media"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Configuracion" Path="notification" Icon="announcement"></RadzenPanelMenuItem>
                }
                else if (user.rol == "2")
                {
                    <RadzenPanelMenuItem Text="Inicio" Path="administrador" Icon="home"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Usuarios" Path="usuarios" Icon="account_circle"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Sucursales" Path="dialog" Icon="perm_media"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Configuracion" Path="notification" Icon="announcement"></RadzenPanelMenuItem>
                }
                else if (user.rol == "3")
                {
                    <RadzenPanelMenuItem Text="Inicio" Path="smto-kiosko" Icon="home"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Reportes" Path="dialog" Icon="perm_media"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Configuracion" Path="notification" Icon="announcement"></RadzenPanelMenuItem>
                }
                else if (user.rol == "4")
                {
                    <RadzenPanelMenuItem Text="Inicio" Path="pagina-principal" Icon="home"></RadzenPanelMenuItem>
                    <RadzenPanelMenuItem Text="Configuracion" Path="notification" Icon="announcement"></RadzenPanelMenuItem>
                }
            }
        </RadzenPanelMenu>
        
    </a>
</div>



@code {
    private bool collapseNavMenu = true;

    string dysplay = "flex";
    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    UserTemp user = new UserTemp();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {

        if (firstRender)
        {
            try
            {
                var storage = await Js.InvokeAsync<string>("Session");
                user = JsonConvert.DeserializeObject<UserTemp>(storage);
                StateHasChanged();
            }
            catch (Exception)
            {

                Console.WriteLine("Error");
            }
        }
    }
}
