@page "/empresas/nueva-empresa"
@inject IJSRuntime Js
@inject HttpClient http
<div class="container-xl mt-4">
    <RadzenCard class="mt-5 ml-1 col-lg-6 m-auto ">
        <div class="row">
            <div class="col">
                <h3>Nueva empresa</h3>
            </div>
        </div>
        <EditForm Model="@empresa" OnValidSubmit="PostEmpresa">
            <DataAnnotationsValidator />
            <div class="border-top mt-3">
                <div class="form-group mt-2">
                    <label class=" mb-1">Nombre de la empresa</label>
                    <InputText @bind-Value="empresa.Nombre" class="form-control"></InputText>
                    <ValidationMessage For=@(() => empresa.Nombre) />
                </div>
            </div>

            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label class=" mb-1">RNC</label>
                        <RadzenMask Mask="*** *** ***" CharacterPattern="[0-9]" Placeholder="000 000 000" Name="RNC"@bind-Value="empresa.RNC" Style="width: 100%;" />
                        <ValidationMessage For=@(() => empresa.RNC) />
                    </div>
                </div>
                <div class="col">
                    <div class="form-group">
                        <label class=" mb-1">Telefono</label>
                        <RadzenMask Mask="(***) ***-****" CharacterPattern="[0-9]" Placeholder="(000) 000-0000" Name="Telefono" @bind-Value="empresa.Telefono"  Style="width: 100%;" />
                        <ValidationMessage For=@(() => empresa.Telefono) />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <div class="form-group">
                        <label class=" mb-1">Propietario</label>

                        <RadzenDropDown AllowClear="true" 
                                        TValue="dynamic" 
                                        AllowVirtualization="true" 
                                        class="w-100 form-control"
                                        AllowFiltering="true" 
                                        Data=@usuariosOnlyId 
                                        Placeholder="Seleccione el propietario..." 
                                        TextProperty="name" 
                                        ValueProperty="id"
                                        Change=@(args => OnChange(args))
                                         />
                        <ValidationMessage For=@(() => empresa.IdUsuario) />
                    </div>
                </div>
                <div class="col-1 pl-0">
                    <a href="usuarios" class="btn btn-success w-100" style="margin-top:26px;">+</a>
                </div>
            </div>

            <div class="form-group">
                <label>Direccion</label>
                <InputTextArea @bind-Value="empresa.Direccion" class="form-control"></InputTextArea>
                <ValidationMessage For=@(() => empresa.Direccion) />
            </div>
            <button type="submit" class="btn btn-success float-right mt-2">Guardar</button>
        </EditForm>
    </RadzenCard>
</div>



@code {
    Empresa empresa = new Empresa();
    GetUsuariosServices usuariosServices = new();
    List<Usuario> usuarios;
    List<CustomUsuariOnlyId> usuariosOnlyId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            usuariosOnlyId = await http.GetFromJsonAsync<List<CustomUsuariOnlyId>>("https://localhost:44391/api/Usuarios/CustomUsuariOnlyId");
        }
        catch (Exception)
        {

            usuarios = new List<Usuario>();
            await Js.InvokeVoidAsync("errorNotFound");
        }
        DateTime date = new DateTime();
        var fecha = DateTime.Now.ToString("yyyy-MM-ddThh:mm:ssz");
        Console.WriteLine(fecha);
    }

    void OnChange(object value)
    {
        empresa.IdUsuario = (int)value;
        Console.WriteLine(empresa.IdUsuario);
    }

    async Task PostEmpresa()
    {

        var fecha = DateTime.Now.ToString("yyyy-MM-ddThh:mm:ss");
        empresa.FechaCreacion = Convert.ToDateTime(fecha);
        empresa.Estado = true;
        string json = JsonConvert.SerializeObject(empresa);
        StringContent httpContent = new StringContent(json, System.Text.Encoding.UTF8, "application/json");
        var responses = await http.PostAsync("https://localhost:44391/api/Empresas", httpContent);
        var respuesta = await responses.Content.ReadFromJsonAsync<CustomEmpresas>();
        if (respuesta.Ok)
        {
            await Js.InvokeAsync<object>("Estado", "Exito", $"{respuesta.Mensaje}", "success");
            empresa = new Empresa();

        }
        else
        {
            await Js.InvokeAsync<object>("Estado", "Oops..", $"{respuesta.Mensaje}", "error");
        }
    }

    class CustomEmpresas
    {
        public bool Ok { get; set; }
        public string Mensaje { get; set; }
        public List<Empresa> Empresas { get; set; }
    }
    public class CustomUsuariOnlyId
    {
        public int id { get; set; }
        public string name { get; set; }
    }
}
